apply plugin: 'com.android.application'
apply plugin: 'realm-android'

// query git for the SHA, Tag and commit count. Use these to automate versioning.
//def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
//def gitTag = 'git describe --tags'.execute([], project.rootDir).text.trim()
//def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute([], project.rootDir).text.trim()
//def gitCommitCount = Integer.parseInt('git rev-list --count HEAD'.execute([], project.rootDir).text.trim())

def getVersionCode = { ->
	try {
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine 'git', 'rev-list', '--first-parent', '--count', 'master'
			standardOutput = stdout
		}
		return Integer.parseInt(stdout.toString().trim())
	}
	catch (ignored) {
		return -1;
	}
}

def getVersionName = { ->
	try {
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine 'git', 'describe', '--tags'
			standardOutput = stdout
		}
		return stdout.toString().trim()
	}
	catch (ignored) {
		return null;
	}
}

def getGitBranch = { ->
	try {
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
			standardOutput = stdout
		}
		return stdout.toString().trim()
	}
	catch (ignored) {
		return "unknown";
	}
}

def getGitHash = { ->
	try {
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine 'git', 'rev-parse', 'HEAD'
			standardOutput = stdout
		}
		return stdout.toString().trim()
	}
	catch (ignored) {
		return "unknown";
	}
}


// http://jeremie-martinez.com/2015/05/05/inject-host-gradle/
def getIP() {
	InetAddress result = null;
	Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
	while (interfaces.hasMoreElements()) {
		Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses();
		while (addresses.hasMoreElements()) {
			InetAddress address = addresses.nextElement();
			if (!address.isLoopbackAddress()) {
				if (address.isSiteLocalAddress()) {
					return address.getHostAddress();
				} else if (result == null) {
					result = address;
				}
			}
		}
	}
	return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();
}

android {
	compileSdkVersion 24
	buildToolsVersion "24.0.2"

	defaultConfig {
		applicationId "org.zakariya.mrdoodle"
		minSdkVersion 17
		targetSdkVersion 24
		versionCode getVersionCode()
		versionName getVersionName()
		buildConfigField 'String', 'LOCAL_IP', '\"' + getIP() + '\"'
		buildConfigField 'String', 'GitBranch', '\"' + getGitBranch() + '\"'
		buildConfigField 'String', 'GitHash', '\"' + getGitHash() + '\"'
	}
	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
	testCompile 'junit:junit:4.12'
	androidTestCompile 'junit:junit:4.12'

	compile 'com.android.support:design:24.2.1'
	compile 'com.android.support:recyclerview-v7:24.2.1'
	compile 'com.android.support:appcompat-v7:24.2.1'

	compile 'com.google.android.gms:play-services-auth:9.4.0'

	// networking
	compile 'com.squareup.retrofit2:retrofit:2.1.0'
	compile 'com.squareup.retrofit2:converter-gson:2.1.0'
	compile 'com.squareup.retrofit2:converter-scalars:2.1.0'
	compile 'io.reactivex:rxandroid:1.2.0'
	compile 'io.reactivex:rxjava:1.1.8'
	compile 'com.squareup:otto:1.3.8'
	compile 'com.squareup.picasso:picasso:2.5.2'
	compile 'com.neovisionaries:nv-websocket-client:1.29'

	// utilities
	compile 'com.jakewharton:butterknife:7.0.1'
	compile 'frankiesardo:icepick:3.1.0'
	provided 'frankiesardo:icepick-processor:3.1.0'
	compile 'com.esotericsoftware:kryo:3.0.3'

	// https://github.com/ShamylZakariya/FlyoutMenus
	compile 'org.zakariya.flyoutmenus:flyoutmenu:0.5.2'

	// https://github.com/ShamylZakariya/StickyHeaders
	compile 'org.zakariya.stickyheaders:stickyheaders:0.7.5'

	// https://github.com/rubensousa/BottomSheetBuilder
	compile 'com.github.rubensousa:BottomSheetBuilder:1.3'

	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	compile group: 'com.google.code.gson', name: 'gson', version: '2.7'

	compile project(path: ':doodle')
}

apply plugin: 'com.google.gms.google-services'
